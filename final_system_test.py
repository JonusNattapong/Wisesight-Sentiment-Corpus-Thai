#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Final comprehensive test of the Thai sentiment analysis system
"""

def test_sentiment_system():
    print("üöÄ Final Thai Sentiment Analysis System Test")
    print("=" * 50)
    
    # Test cases covering various scenarios
    test_cases = [
        # Standard cases
        {"text": "‡∏î‡∏µ‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢ ‚ù§Ô∏èüòç", "expected": "positive", "description": "Clear positive with emojis"},
        {"text": "‡∏´‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡∏Å‡∏°‡∏≤‡∏Å ‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡πÄ‡∏•‡∏¢ üò°", "expected": "negative", "description": "Clear negative with emoji"},
        {"text": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", "expected": "neutral", "description": "Neutral informational text"},
        
        # Sarcasm and irony cases
        {"text": "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏ô‡∏≠‡∏∞ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ üôÑ", "expected": "negative", "description": "Sarcastic comment with eye-roll emoji"},
        {"text": "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞‡∏Ñ‡∏∞‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï üòä", "expected": "negative", "description": "Sarcastic thanks"},
        {"text": "‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏Ñ‡∏£‡∏±‡∏ö... ‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "expected": "negative", "description": "Sarcasm with ellipsis"},
        
        # Complex cases
        {"text": "‡πÇ‡∏Å‡∏£‡∏ò‡∏à‡∏ô‡∏Ç‡∏≥‡∏≠‡∏∞! ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ 555 üò°üòÇ", "expected": "mixed", "description": "Mixed emotions: anger + humor"},
        {"text": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡πâ‡∏≤‡πÑ‡∏õ‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á", "expected": "mixed", "description": "Mixed review"},
        {"text": "‡∏ó‡∏≥‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏Ñ‡∏≠‡πÄ‡∏ô‡∏≠‡∏∞?", "expected": "negative", "description": "Rhetorical question expressing disbelief"},
        {"text": "‡∏™‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÑ‡∏á", "expected": "positive", "description": "Double negative expressing positive"},
        
        # Code-switching and modern slang
        {"text": "‡πÇ‡∏Ñ‡∏ï‡∏£ cute ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏õ‡∏•‡∏∑‡πâ‡∏°‡∏à‡∏±‡∏á OwO", "expected": "positive", "description": "Thai-English mix with modern slang"},
        {"text": "cringe ‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏ô‡∏µ‡πà‡∏¢", "expected": "negative", "description": "English slang in Thai context"},
        
        # Social media style
        {"text": "Today mood: ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏à‡∏±‡∏á but still fighting üí™", "expected": "mixed", "description": "Mixed Thai-English social media post"},
    ]
    
    try:
        from app import enhanced_analyze_sentiment
        
        print(f"üìä Running {len(test_cases)} test cases...")
        print()
        
        correct = 0
        total = len(test_cases)
        
        for i, case in enumerate(test_cases, 1):
            text = case["text"]
            expected = case["expected"]
            description = case["description"]
            
            try:
                result = enhanced_analyze_sentiment(text)
                predicted = result["sentiment"]
                confidence = result["confidence"]
                details = result.get("detailed_sentiment", "N/A")
                
                is_correct = (predicted == expected or 
                             (expected == "mixed" and confidence < 0.7))  # Lower confidence often indicates mixed
                
                if is_correct:
                    correct += 1
                    status = "‚úÖ"
                else:
                    status = "‚ùå"
                
                print(f"{status} Test {i}: {description}")
                print(f"   Text: {text}")
                print(f"   Expected: {expected} | Predicted: {predicted} | Confidence: {confidence:.2f}")
                print(f"   Details: {details}")
                print()
                
            except Exception as e:
                print(f"‚ùå Test {i} failed with error: {e}")
                print(f"   Text: {text}")
                print()
        
        accuracy = (correct / total) * 100
        print(f"üìà Final Results:")
        print(f"   Accuracy: {correct}/{total} = {accuracy:.1f}%")
        
        if accuracy >= 80:
            print("üéâ Excellent performance!")
        elif accuracy >= 70:
            print("üëç Good performance!")
        elif accuracy >= 60:
            print("üëå Acceptable performance!")
        else:
            print("‚ö†Ô∏è Needs improvement!")
            
        return accuracy >= 70
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("Please ensure app.py is working correctly.")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_youtube_integration():
    """Test YouTube integration if possible"""
    print("\nüé¨ Testing YouTube Integration")
    print("=" * 35)
    
    try:
        from app import fetch_youtube_comments, flatten_comments
        
        # Use a single URL for testing
        test_url = "https://www.youtube.com/watch?v=0EZDL8xqXsY"
        print(f"üîç Testing with URL: {test_url}")
        
        # Try to fetch a few comments
        comments = fetch_youtube_comments(test_url, max_comments=5)
        
        if comments:
            print(f"‚úÖ Successfully fetched {len(comments)} comments")
            
            # Try flattening
            flattened = flatten_comments(comments)
            print(f"‚úÖ Flattened to {len(flattened)} entries")
            
            # Show a sample
            if flattened:
                sample = flattened[0]
                print(f"üìù Sample comment: {sample.get('text', '')[:100]}...")
                return True
        else:
            print("‚ÑπÔ∏è No comments fetched (this may be normal for some videos)")
            return True  # Not necessarily a failure
            
    except Exception as e:
        print(f"‚ö†Ô∏è YouTube integration test failed: {e}")
        print("This might be due to network issues or YouTube restrictions")
        return False

if __name__ == "__main__":
    print("üß™ Running comprehensive system tests...\n")
    
    # Test core sentiment analysis
    sentiment_ok = test_sentiment_system()
    
    # Test YouTube integration
    youtube_ok = test_youtube_integration()
    
    print("\n" + "=" * 50)
    print("üèÅ Final Test Summary:")
    print(f"   Sentiment Analysis: {'‚úÖ PASS' if sentiment_ok else '‚ùå FAIL'}")
    print(f"   YouTube Integration: {'‚úÖ PASS' if youtube_ok else '‚ùå FAIL'}")
    
    if sentiment_ok and youtube_ok:
        print("\nüéâ All systems operational! The Thai sentiment analysis system is ready.")
    elif sentiment_ok:
        print("\nüëç Core sentiment analysis is working. YouTube integration needs attention.")
    else:
        print("\n‚ö†Ô∏è Core issues need to be resolved.")
