#!/usr/bin/env python3
"""
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á Advanced Thai Sentiment Analysis
"""

import json
import sys
from collections import Counter
from pathlib import Path

def analyze_sentiment_accuracy(file_path):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á sentiment analysis"""
    
    # Load data
    comments = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            try:
                comments.append(json.loads(line))
            except json.JSONDecodeError:
                continue
    
    print("=" * 70)
    print("üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á Advanced Thai Sentiment Analysis")
    print("=" * 70)
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(comments)}")
    print()
    
    # Basic statistics
    emotions = [c.get('emotion') for c in comments if c.get('emotion')]
    emotion_counts = Counter(emotions)
    print("üé≠ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Emotion:")
    for emotion, count in emotion_counts.most_common():
        print(f"   {emotion}: {count} ({count/len(comments)*100:.1f}%)")
    print()
    
    # Intent distribution
    intents = [c.get('intent') for c in comments if c.get('intent')]
    intent_counts = Counter(intents)
    print("üéØ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Intent:")
    for intent, count in intent_counts.most_common():
        print(f"   {intent}: {count} ({count/len(comments)*100:.1f}%)")
    print()
    
    # Intensity distribution
    intensities = [c.get('intensity') for c in comments if c.get('intensity')]
    intensity_counts = Counter(intensities)
    print("‚ö° ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Intensity:")
    for intensity, count in intensity_counts.most_common():
        print(f"   {intensity}: {count} ({count/len(comments)*100:.1f}%)")
    print()
    
    # Context distribution
    contexts = [c.get('context') for c in comments if c.get('context')]
    context_counts = Counter(contexts)
    print("üåç ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Context:")
    for context, count in context_counts.most_common():
        print(f"   {context}: {count} ({count/len(comments)*100:.1f}%)")
    print()
    
    # Sentiment score distribution
    scores = [c.get('sentiment_score') for c in comments if c.get('sentiment_score') is not None]
    positive_scores = [s for s in scores if s > 0]
    negative_scores = [s for s in scores if s < 0]
    neutral_scores = [s for s in scores if s == 0]
    
    print("üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Sentiment Score:")
    print(f"   Positive (>0): {len(positive_scores)} ({len(positive_scores)/len(comments)*100:.1f}%)")
    print(f"   Negative (<0): {len(negative_scores)} ({len(negative_scores)/len(comments)*100:.1f}%)")
    print(f"   Neutral (=0): {len(neutral_scores)} ({len(neutral_scores)/len(comments)*100:.1f}%)")
    print()
    
    # Manual accuracy evaluation with examples
    print("=" * 70)
    print("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Manual Evaluation)")
    print("=" * 70)
    
    # Show examples categorized by sentiment type
    examples_by_type = {
        'positive': [],
        'negative': [],
        'neutral': []
    }
    
    for comment in comments:
        score = comment.get('sentiment_score', 0)
        if score > 0:
            examples_by_type['positive'].append(comment)
        elif score < 0:
            examples_by_type['negative'].append(comment)
        else:
            examples_by_type['neutral'].append(comment)
    
    # Show examples for each type
    for sentiment_type, examples in examples_by_type.items():
        if examples:
            print(f"\nüî∏ {sentiment_type.upper()} Examples (‡πÅ‡∏™‡∏î‡∏á 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á):")
            for i, comment in enumerate(examples[:3]):
                text = comment.get('text', '')
                if len(text) > 80:
                    text = text[:77] + "..."
                
                emotion = comment.get('emotion', 'N/A')
                intent = comment.get('intent', 'N/A')
                score = comment.get('sentiment_score', 'N/A')
                intensity = comment.get('intensity', 'N/A')
                
                print(f"   {i+1}. \"{text}\"")
                print(f"      ‚Üí Emotion: {emotion} | Intent: {intent} | Score: {score} | Intensity: {intensity}")
                print()
    
    # Accuracy assessment
    print("=" * 70)
    print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)")
    print("=" * 70)
    
    # Check some specific cases for accuracy
    accuracy_cases = []
    
    for comment in comments[:10]:  # Check first 10 comments
        text = comment.get('text', '').lower()
        emotion = comment.get('emotion', '')
        score = comment.get('sentiment_score', 0)
        
        # Manual assessment based on Thai sentiment indicators
        manual_assessment = "neutral"
        if any(word in text for word in ['‡∏•‡πà‡∏°', '‡πÅ‡∏¢‡πà', '‡πÄ‡∏î‡∏∑‡∏≠‡∏î‡∏£‡πâ‡∏≠‡∏ô', '‡∏•‡∏≥‡∏ö‡∏≤‡∏Å', '‡∏´‡∏±‡∏ß‡πÄ‡∏™‡∏µ‡∏¢', '‡∏ó‡πâ‡∏≠']):
            manual_assessment = "negative"
        elif any(word in text for word in ['‡∏î‡∏µ', '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°', '‡∏ä‡∏≠‡∏ö', '‡∏õ‡∏Å‡∏ï‡∏¥']):
            manual_assessment = "positive"
        
        # Compare with system assessment
        system_assessment = "neutral"
        if score > 0:
            system_assessment = "positive"
        elif score < 0:
            system_assessment = "negative"
        
        is_correct = manual_assessment == system_assessment
        accuracy_cases.append({
            'text': text[:60] + "..." if len(text) > 60 else text,
            'manual': manual_assessment,
            'system': system_assessment,
            'emotion': emotion,
            'score': score,
            'correct': is_correct
        })
    
    correct_count = sum(1 for case in accuracy_cases if case['correct'])
    accuracy_rate = correct_count / len(accuracy_cases) * 100
    
    print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {accuracy_rate:.1f}% ({correct_count}/{len(accuracy_cases)})")
    print()
    
    print("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:")
    for i, case in enumerate(accuracy_cases):
        status = "‚úÖ" if case['correct'] else "‚ùå"
        print(f"   {i+1}. {status} \"{case['text']}\"")
        print(f"      Manual: {case['manual']} | System: {case['system']} | Score: {case['score']}")
        print()
    
    # Summary and recommendations
    print("=" * 70)
    print("üìà ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞")
    print("=" * 70)
    
    print("üéØ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:")
    print("   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å emotion ‡πÅ‡∏•‡∏∞ intent ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢")
    print("   ‚Ä¢ ‡∏°‡∏µ intensity ‡πÅ‡∏•‡∏∞ context analysis")
    print("   ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ")
    print()
    
    print("‚ö†Ô∏è  ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:")
    if emotion_counts.get('neutral', 0) > len(comments) * 0.7:
        print("   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô 'neutral' ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
    
    if len(positive_scores) < len(negative_scores) * 0.5:
        print("   ‚Ä¢ ‡∏≠‡∏≤‡∏à‡∏à‡∏≥‡πÅ‡∏ô‡∏Å positive sentiment ‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
    
    print("   ‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á keyword patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")
    print("   ‚Ä¢ ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° machine learning model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô")
    print()
    
    print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    print("   ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö manual verification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
    print("   ‚Ä¢ ‡∏õ‡∏£‡∏±‡∏ö similarity threshold ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    print("   ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á")

def main():
    file_path = "data/pantip_comments_2sources_20250620_184828.jsonl"
    
    if not Path(file_path).exists():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
        return
    
    analyze_sentiment_accuracy(file_path)

if __name__ == "__main__":
    main()
